########## MACROS ###########################################################################
#############################################################################################

function(conan_message MESSAGE_OUTPUT)
    if(NOT CONAN_CMAKE_SILENT_OUTPUT)
        message(${ARGV${0}})
    endif()
endfunction()


macro(conan_find_apple_frameworks FRAMEWORKS_FOUND FRAMEWORKS FRAMEWORKS_DIRS)
    if(APPLE)
        foreach(_FRAMEWORK ${FRAMEWORKS})
            # https://cmake.org/pipermail/cmake-developers/2017-August/030199.html
            find_library(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND NAME ${_FRAMEWORK} PATHS ${FRAMEWORKS_DIRS} CMAKE_FIND_ROOT_PATH_BOTH)
            if(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND)
                list(APPEND ${FRAMEWORKS_FOUND} ${CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND})
            else()
                message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${FRAMEWORKS_DIRS}")
            endif()
        endforeach()
    endif()
endmacro()


function(conan_package_library_targets libraries package_libdir deps out_libraries out_libraries_target build_type package_name)
    unset(_CONAN_ACTUAL_TARGETS CACHE)
    unset(_CONAN_FOUND_SYSTEM_LIBS CACHE)
    foreach(_LIBRARY_NAME ${libraries})
        find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${package_libdir}
                     NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(CONAN_FOUND_LIBRARY)
            conan_message(STATUS "Library ${_LIBRARY_NAME} found ${CONAN_FOUND_LIBRARY}")
            list(APPEND _out_libraries ${CONAN_FOUND_LIBRARY})
            if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
                # Create a micro-target for each lib/a found
                set(_LIB_NAME CONAN_LIB::${package_name}_${_LIBRARY_NAME}${build_type})
                if(NOT TARGET ${_LIB_NAME})
                    # Create a micro-target for each lib/a found
                    add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                    set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
                    set(_CONAN_ACTUAL_TARGETS ${_CONAN_ACTUAL_TARGETS} ${_LIB_NAME})
                else()
                    conan_message(STATUS "Skipping already existing target: ${_LIB_NAME}")
                endif()
                list(APPEND _out_libraries_target ${_LIB_NAME})
            endif()
            conan_message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
        else()
            conan_message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
            list(APPEND _out_libraries_target ${_LIBRARY_NAME})
            list(APPEND _out_libraries ${_LIBRARY_NAME})
            set(_CONAN_FOUND_SYSTEM_LIBS "${_CONAN_FOUND_SYSTEM_LIBS};${_LIBRARY_NAME}")
        endif()
        unset(CONAN_FOUND_LIBRARY CACHE)
    endforeach()

    if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
        # Add all dependencies to all targets
        string(REPLACE " " ";" deps_list "${deps}")
        foreach(_CONAN_ACTUAL_TARGET ${_CONAN_ACTUAL_TARGETS})
            set_property(TARGET ${_CONAN_ACTUAL_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES "${_CONAN_FOUND_SYSTEM_LIBS};${deps_list}")
        endforeach()
    endif()

    set(${out_libraries} ${_out_libraries} PARENT_SCOPE)
    set(${out_libraries_target} ${_out_libraries_target} PARENT_SCOPE)
endfunction()


########### FOUND PACKAGE ###################################################################
#############################################################################################

include(FindPackageHandleStandardArgs)

conan_message(STATUS "Conan: Using autogenerated Findxkbcommon.cmake")
set(xkbcommon_FOUND 1)
set(xkbcommon_VERSION "1.1.0")

find_package_handle_standard_args(xkbcommon REQUIRED_VARS
                                  xkbcommon_VERSION VERSION_VAR xkbcommon_VERSION)
mark_as_advanced(xkbcommon_FOUND xkbcommon_VERSION)

set(xkbcommon_COMPONENTS xkbcommon::libxkbcommon-x11 xkbcommon::libxkbcommon xkbcommon::libxkbregistry)

if(xkbcommon_FIND_COMPONENTS)
    foreach(_FIND_COMPONENT ${xkbcommon_FIND_COMPONENTS})
        list(FIND xkbcommon_COMPONENTS "xkbcommon::${_FIND_COMPONENT}" _index)
        if(${_index} EQUAL -1)
            conan_message(FATAL_ERROR "Conan: Component '${_FIND_COMPONENT}' NOT found in package 'xkbcommon'")
        else()
            conan_message(STATUS "Conan: Component '${_FIND_COMPONENT}' found in package 'xkbcommon'")
        endif()
    endforeach()
endif()

########### VARIABLES #######################################################################
#############################################################################################


set(xkbcommon_INCLUDE_DIRS "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/include")
set(xkbcommon_INCLUDE_DIR "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/include")
set(xkbcommon_INCLUDES "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/include")
set(xkbcommon_RES_DIRS )
set(xkbcommon_DEFINITIONS )
set(xkbcommon_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)
set(xkbcommon_COMPILE_DEFINITIONS )
set(xkbcommon_COMPILE_OPTIONS_LIST "" "")
set(xkbcommon_COMPILE_OPTIONS_C "")
set(xkbcommon_COMPILE_OPTIONS_CXX "")
set(xkbcommon_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(xkbcommon_LIBRARIES "") # Will be filled later
set(xkbcommon_LIBS "") # Same as xkbcommon_LIBRARIES
set(xkbcommon_SYSTEM_LIBS )
set(xkbcommon_FRAMEWORK_DIRS )
set(xkbcommon_FRAMEWORKS )
set(xkbcommon_FRAMEWORKS_FOUND "") # Will be filled later
set(xkbcommon_BUILD_MODULES_PATHS )

conan_find_apple_frameworks(xkbcommon_FRAMEWORKS_FOUND "${xkbcommon_FRAMEWORKS}" "${xkbcommon_FRAMEWORK_DIRS}")

mark_as_advanced(xkbcommon_INCLUDE_DIRS
                 xkbcommon_INCLUDE_DIR
                 xkbcommon_INCLUDES
                 xkbcommon_DEFINITIONS
                 xkbcommon_LINKER_FLAGS_LIST
                 xkbcommon_COMPILE_DEFINITIONS
                 xkbcommon_COMPILE_OPTIONS_LIST
                 xkbcommon_LIBRARIES
                 xkbcommon_LIBS
                 xkbcommon_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to xkbcommon_LIBS and xkbcommon_LIBRARY_LIST
set(xkbcommon_LIBRARY_LIST xkbcommon-x11 xkbcommon xkbregistry)
set(xkbcommon_LIB_DIRS "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/lib")

# Gather all the libraries that should be linked to the targets (do not touch existing variables):
set(_xkbcommon_DEPENDENCIES "${xkbcommon_FRAMEWORKS_FOUND} ${xkbcommon_SYSTEM_LIBS} xorg::xcb;xorg::xcb-xkb;xorg::xkeyboard-config;LibXml2::LibXml2")

conan_package_library_targets("${xkbcommon_LIBRARY_LIST}"  # libraries
                              "${xkbcommon_LIB_DIRS}"      # package_libdir
                              "${_xkbcommon_DEPENDENCIES}"  # deps
                              xkbcommon_LIBRARIES            # out_libraries
                              xkbcommon_LIBRARIES_TARGETS    # out_libraries_targets
                              ""                          # build_type
                              "xkbcommon")                                      # package_name

set(xkbcommon_LIBS ${xkbcommon_LIBRARIES})

foreach(_FRAMEWORK ${xkbcommon_FRAMEWORKS_FOUND})
    list(APPEND xkbcommon_LIBRARIES_TARGETS ${_FRAMEWORK})
    list(APPEND xkbcommon_LIBRARIES ${_FRAMEWORK})
endforeach()

foreach(_SYSTEM_LIB ${xkbcommon_SYSTEM_LIBS})
    list(APPEND xkbcommon_LIBRARIES_TARGETS ${_SYSTEM_LIB})
    list(APPEND xkbcommon_LIBRARIES ${_SYSTEM_LIB})
endforeach()

# We need to add our requirements too
set(xkbcommon_LIBRARIES_TARGETS "${xkbcommon_LIBRARIES_TARGETS};xorg::xcb;xorg::xcb-xkb;xorg::xkeyboard-config;LibXml2::LibXml2")
set(xkbcommon_LIBRARIES "${xkbcommon_LIBRARIES};xorg::xcb;xorg::xcb-xkb;xorg::xkeyboard-config;LibXml2::LibXml2")

set(CMAKE_MODULE_PATH "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/" ${CMAKE_PREFIX_PATH})


########### COMPONENT libxkbregistry VARIABLES #############################################

set(xkbcommon_libxkbregistry_INCLUDE_DIRS "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/include")
set(xkbcommon_libxkbregistry_INCLUDE_DIR "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/include")
set(xkbcommon_libxkbregistry_INCLUDES "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/include")
set(xkbcommon_libxkbregistry_LIB_DIRS "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/lib")
set(xkbcommon_libxkbregistry_RES_DIRS )
set(xkbcommon_libxkbregistry_DEFINITIONS )
set(xkbcommon_libxkbregistry_COMPILE_DEFINITIONS )
set(xkbcommon_libxkbregistry_COMPILE_OPTIONS_C "")
set(xkbcommon_libxkbregistry_COMPILE_OPTIONS_CXX "")
set(xkbcommon_libxkbregistry_LIBS xkbregistry)
set(xkbcommon_libxkbregistry_SYSTEM_LIBS )
set(xkbcommon_libxkbregistry_FRAMEWORK_DIRS )
set(xkbcommon_libxkbregistry_FRAMEWORKS )
set(xkbcommon_libxkbregistry_BUILD_MODULES_PATHS )
set(xkbcommon_libxkbregistry_DEPENDENCIES LibXml2::LibXml2)
set(xkbcommon_libxkbregistry_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT libxkbcommon VARIABLES #############################################

set(xkbcommon_libxkbcommon_INCLUDE_DIRS "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/include")
set(xkbcommon_libxkbcommon_INCLUDE_DIR "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/include")
set(xkbcommon_libxkbcommon_INCLUDES "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/include")
set(xkbcommon_libxkbcommon_LIB_DIRS "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/lib")
set(xkbcommon_libxkbcommon_RES_DIRS )
set(xkbcommon_libxkbcommon_DEFINITIONS )
set(xkbcommon_libxkbcommon_COMPILE_DEFINITIONS )
set(xkbcommon_libxkbcommon_COMPILE_OPTIONS_C "")
set(xkbcommon_libxkbcommon_COMPILE_OPTIONS_CXX "")
set(xkbcommon_libxkbcommon_LIBS xkbcommon)
set(xkbcommon_libxkbcommon_SYSTEM_LIBS )
set(xkbcommon_libxkbcommon_FRAMEWORK_DIRS )
set(xkbcommon_libxkbcommon_FRAMEWORKS )
set(xkbcommon_libxkbcommon_BUILD_MODULES_PATHS )
set(xkbcommon_libxkbcommon_DEPENDENCIES xorg::xkeyboard-config)
set(xkbcommon_libxkbcommon_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT libxkbcommon-x11 VARIABLES #############################################

set(xkbcommon_libxkbcommon-x11_INCLUDE_DIRS "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/include")
set(xkbcommon_libxkbcommon-x11_INCLUDE_DIR "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/include")
set(xkbcommon_libxkbcommon-x11_INCLUDES "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/include")
set(xkbcommon_libxkbcommon-x11_LIB_DIRS "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/lib")
set(xkbcommon_libxkbcommon-x11_RES_DIRS )
set(xkbcommon_libxkbcommon-x11_DEFINITIONS )
set(xkbcommon_libxkbcommon-x11_COMPILE_DEFINITIONS )
set(xkbcommon_libxkbcommon-x11_COMPILE_OPTIONS_C "")
set(xkbcommon_libxkbcommon-x11_COMPILE_OPTIONS_CXX "")
set(xkbcommon_libxkbcommon-x11_LIBS xkbcommon-x11)
set(xkbcommon_libxkbcommon-x11_SYSTEM_LIBS )
set(xkbcommon_libxkbcommon-x11_FRAMEWORK_DIRS )
set(xkbcommon_libxkbcommon-x11_FRAMEWORKS )
set(xkbcommon_libxkbcommon-x11_BUILD_MODULES_PATHS )
set(xkbcommon_libxkbcommon-x11_DEPENDENCIES xkbcommon::libxkbcommon xorg::xcb xorg::xcb-xkb)
set(xkbcommon_libxkbcommon-x11_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)


########## FIND PACKAGE DEPENDENCY ##########################################################
#############################################################################################

include(CMakeFindDependencyMacro)

if(NOT xorg_FOUND)
    find_dependency(xorg REQUIRED)
else()
    conan_message(STATUS "Conan: Dependency xorg already found")
endif()

if(NOT xorg_FOUND)
    find_dependency(xorg REQUIRED)
else()
    conan_message(STATUS "Conan: Dependency xorg already found")
endif()

if(NOT xorg_FOUND)
    find_dependency(xorg REQUIRED)
else()
    conan_message(STATUS "Conan: Dependency xorg already found")
endif()

if(NOT LibXml2_FOUND)
    find_dependency(LibXml2 REQUIRED)
else()
    conan_message(STATUS "Conan: Dependency LibXml2 already found")
endif()


########## FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #######################################
#############################################################################################

########## COMPONENT libxkbregistry FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(xkbcommon_libxkbregistry_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(xkbcommon_libxkbregistry_FRAMEWORKS_FOUND "${xkbcommon_libxkbregistry_FRAMEWORKS}" "${xkbcommon_libxkbregistry_FRAMEWORK_DIRS}")

set(xkbcommon_libxkbregistry_LIB_TARGETS "")
set(xkbcommon_libxkbregistry_NOT_USED "")
set(xkbcommon_libxkbregistry_LIBS_FRAMEWORKS_DEPS ${xkbcommon_libxkbregistry_FRAMEWORKS_FOUND} ${xkbcommon_libxkbregistry_SYSTEM_LIBS} ${xkbcommon_libxkbregistry_DEPENDENCIES})
conan_package_library_targets("${xkbcommon_libxkbregistry_LIBS}"
                              "${xkbcommon_libxkbregistry_LIB_DIRS}"
                              "${xkbcommon_libxkbregistry_LIBS_FRAMEWORKS_DEPS}"
                              xkbcommon_libxkbregistry_NOT_USED
                              xkbcommon_libxkbregistry_LIB_TARGETS
                              ""
                              "xkbcommon_libxkbregistry")

set(xkbcommon_libxkbregistry_LINK_LIBS ${xkbcommon_libxkbregistry_LIB_TARGETS} ${xkbcommon_libxkbregistry_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/" ${CMAKE_PREFIX_PATH})

########## COMPONENT libxkbcommon FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(xkbcommon_libxkbcommon_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(xkbcommon_libxkbcommon_FRAMEWORKS_FOUND "${xkbcommon_libxkbcommon_FRAMEWORKS}" "${xkbcommon_libxkbcommon_FRAMEWORK_DIRS}")

set(xkbcommon_libxkbcommon_LIB_TARGETS "")
set(xkbcommon_libxkbcommon_NOT_USED "")
set(xkbcommon_libxkbcommon_LIBS_FRAMEWORKS_DEPS ${xkbcommon_libxkbcommon_FRAMEWORKS_FOUND} ${xkbcommon_libxkbcommon_SYSTEM_LIBS} ${xkbcommon_libxkbcommon_DEPENDENCIES})
conan_package_library_targets("${xkbcommon_libxkbcommon_LIBS}"
                              "${xkbcommon_libxkbcommon_LIB_DIRS}"
                              "${xkbcommon_libxkbcommon_LIBS_FRAMEWORKS_DEPS}"
                              xkbcommon_libxkbcommon_NOT_USED
                              xkbcommon_libxkbcommon_LIB_TARGETS
                              ""
                              "xkbcommon_libxkbcommon")

set(xkbcommon_libxkbcommon_LINK_LIBS ${xkbcommon_libxkbcommon_LIB_TARGETS} ${xkbcommon_libxkbcommon_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/" ${CMAKE_PREFIX_PATH})

########## COMPONENT libxkbcommon-x11 FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(xkbcommon_libxkbcommon-x11_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(xkbcommon_libxkbcommon-x11_FRAMEWORKS_FOUND "${xkbcommon_libxkbcommon-x11_FRAMEWORKS}" "${xkbcommon_libxkbcommon-x11_FRAMEWORK_DIRS}")

set(xkbcommon_libxkbcommon-x11_LIB_TARGETS "")
set(xkbcommon_libxkbcommon-x11_NOT_USED "")
set(xkbcommon_libxkbcommon-x11_LIBS_FRAMEWORKS_DEPS ${xkbcommon_libxkbcommon-x11_FRAMEWORKS_FOUND} ${xkbcommon_libxkbcommon-x11_SYSTEM_LIBS} ${xkbcommon_libxkbcommon-x11_DEPENDENCIES})
conan_package_library_targets("${xkbcommon_libxkbcommon-x11_LIBS}"
                              "${xkbcommon_libxkbcommon-x11_LIB_DIRS}"
                              "${xkbcommon_libxkbcommon-x11_LIBS_FRAMEWORKS_DEPS}"
                              xkbcommon_libxkbcommon-x11_NOT_USED
                              xkbcommon_libxkbcommon-x11_LIB_TARGETS
                              ""
                              "xkbcommon_libxkbcommon-x11")

set(xkbcommon_libxkbcommon-x11_LINK_LIBS ${xkbcommon_libxkbcommon-x11_LIB_TARGETS} ${xkbcommon_libxkbcommon-x11_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/home/joao/.conan/data/xkbcommon/1.1.0/_/_/package/46413bc1d1945f58b030a13621c52b586e8a7a6c/" ${CMAKE_PREFIX_PATH})


########## TARGETS ##########################################################################
#############################################################################################

########## COMPONENT libxkbregistry TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET xkbcommon::libxkbregistry)
        add_library(xkbcommon::libxkbregistry INTERFACE IMPORTED)
        set_target_properties(xkbcommon::libxkbregistry PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${xkbcommon_libxkbregistry_INCLUDE_DIRS}")
        set_target_properties(xkbcommon::libxkbregistry PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${xkbcommon_libxkbregistry_LIB_DIRS}")
        set_target_properties(xkbcommon::libxkbregistry PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${xkbcommon_libxkbregistry_LINK_LIBS};${xkbcommon_libxkbregistry_LINKER_FLAGS_LIST}")
        set_target_properties(xkbcommon::libxkbregistry PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${xkbcommon_libxkbregistry_COMPILE_DEFINITIONS}")
        set_target_properties(xkbcommon::libxkbregistry PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${xkbcommon_libxkbregistry_COMPILE_OPTIONS_C};${xkbcommon_libxkbregistry_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT libxkbcommon TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET xkbcommon::libxkbcommon)
        add_library(xkbcommon::libxkbcommon INTERFACE IMPORTED)
        set_target_properties(xkbcommon::libxkbcommon PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${xkbcommon_libxkbcommon_INCLUDE_DIRS}")
        set_target_properties(xkbcommon::libxkbcommon PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${xkbcommon_libxkbcommon_LIB_DIRS}")
        set_target_properties(xkbcommon::libxkbcommon PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${xkbcommon_libxkbcommon_LINK_LIBS};${xkbcommon_libxkbcommon_LINKER_FLAGS_LIST}")
        set_target_properties(xkbcommon::libxkbcommon PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${xkbcommon_libxkbcommon_COMPILE_DEFINITIONS}")
        set_target_properties(xkbcommon::libxkbcommon PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${xkbcommon_libxkbcommon_COMPILE_OPTIONS_C};${xkbcommon_libxkbcommon_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT libxkbcommon-x11 TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET xkbcommon::libxkbcommon-x11)
        add_library(xkbcommon::libxkbcommon-x11 INTERFACE IMPORTED)
        set_target_properties(xkbcommon::libxkbcommon-x11 PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${xkbcommon_libxkbcommon-x11_INCLUDE_DIRS}")
        set_target_properties(xkbcommon::libxkbcommon-x11 PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${xkbcommon_libxkbcommon-x11_LIB_DIRS}")
        set_target_properties(xkbcommon::libxkbcommon-x11 PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${xkbcommon_libxkbcommon-x11_LINK_LIBS};${xkbcommon_libxkbcommon-x11_LINKER_FLAGS_LIST}")
        set_target_properties(xkbcommon::libxkbcommon-x11 PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${xkbcommon_libxkbcommon-x11_COMPILE_DEFINITIONS}")
        set_target_properties(xkbcommon::libxkbcommon-x11 PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${xkbcommon_libxkbcommon-x11_COMPILE_OPTIONS_C};${xkbcommon_libxkbcommon-x11_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## GLOBAL TARGET ####################################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    if(NOT TARGET xkbcommon::xkbcommon)
        add_library(xkbcommon::xkbcommon INTERFACE IMPORTED)
    endif()
    set_property(TARGET xkbcommon::xkbcommon APPEND PROPERTY
                 INTERFACE_LINK_LIBRARIES "${xkbcommon_COMPONENTS}")
endif()

########## BUILD MODULES ####################################################################
#############################################################################################
########## COMPONENT libxkbregistry BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${xkbcommon_libxkbregistry_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT libxkbcommon BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${xkbcommon_libxkbcommon_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT libxkbcommon-x11 BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${xkbcommon_libxkbcommon-x11_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
