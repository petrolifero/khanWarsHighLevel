

function(conan_message MESSAGE_OUTPUT)
    if(NOT CONAN_CMAKE_SILENT_OUTPUT)
        message(${ARGV${0}})
    endif()
endfunction()


macro(conan_find_apple_frameworks FRAMEWORKS_FOUND FRAMEWORKS FRAMEWORKS_DIRS)
    if(APPLE)
        foreach(_FRAMEWORK ${FRAMEWORKS})
            # https://cmake.org/pipermail/cmake-developers/2017-August/030199.html
            find_library(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND NAME ${_FRAMEWORK} PATHS ${FRAMEWORKS_DIRS} CMAKE_FIND_ROOT_PATH_BOTH)
            if(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND)
                list(APPEND ${FRAMEWORKS_FOUND} ${CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND})
            else()
                message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${FRAMEWORKS_DIRS}")
            endif()
        endforeach()
    endif()
endmacro()


function(conan_package_library_targets libraries package_libdir deps out_libraries out_libraries_target build_type package_name)
    unset(_CONAN_ACTUAL_TARGETS CACHE)
    unset(_CONAN_FOUND_SYSTEM_LIBS CACHE)
    foreach(_LIBRARY_NAME ${libraries})
        find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${package_libdir}
                     NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(CONAN_FOUND_LIBRARY)
            conan_message(STATUS "Library ${_LIBRARY_NAME} found ${CONAN_FOUND_LIBRARY}")
            list(APPEND _out_libraries ${CONAN_FOUND_LIBRARY})
            if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
                # Create a micro-target for each lib/a found
                set(_LIB_NAME CONAN_LIB::${package_name}_${_LIBRARY_NAME}${build_type})
                if(NOT TARGET ${_LIB_NAME})
                    # Create a micro-target for each lib/a found
                    add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                    set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
                    set(_CONAN_ACTUAL_TARGETS ${_CONAN_ACTUAL_TARGETS} ${_LIB_NAME})
                else()
                    conan_message(STATUS "Skipping already existing target: ${_LIB_NAME}")
                endif()
                list(APPEND _out_libraries_target ${_LIB_NAME})
            endif()
            conan_message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
        else()
            conan_message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
            list(APPEND _out_libraries_target ${_LIBRARY_NAME})
            list(APPEND _out_libraries ${_LIBRARY_NAME})
            set(_CONAN_FOUND_SYSTEM_LIBS "${_CONAN_FOUND_SYSTEM_LIBS};${_LIBRARY_NAME}")
        endif()
        unset(CONAN_FOUND_LIBRARY CACHE)
    endforeach()

    if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
        # Add all dependencies to all targets
        string(REPLACE " " ";" deps_list "${deps}")
        foreach(_CONAN_ACTUAL_TARGET ${_CONAN_ACTUAL_TARGETS})
            set_property(TARGET ${_CONAN_ACTUAL_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES "${_CONAN_FOUND_SYSTEM_LIBS};${deps_list}")
        endforeach()
    endif()

    set(${out_libraries} ${_out_libraries} PARENT_SCOPE)
    set(${out_libraries_target} ${_out_libraries_target} PARENT_SCOPE)
endfunction()


include(FindPackageHandleStandardArgs)

conan_message(STATUS "Conan: Using autogenerated FindFontconfig.cmake")
# Global approach
set(Fontconfig_FOUND 1)
set(Fontconfig_VERSION "2.13.93")

find_package_handle_standard_args(Fontconfig REQUIRED_VARS
                                  Fontconfig_VERSION VERSION_VAR Fontconfig_VERSION)
mark_as_advanced(Fontconfig_FOUND Fontconfig_VERSION)


set(Fontconfig_INCLUDE_DIRS "/home/joao/.conan/data/fontconfig/2.13.93/_/_/package/e135b8afaaf9274276e3ae293315395467cd735b/include")
set(Fontconfig_INCLUDE_DIR "/home/joao/.conan/data/fontconfig/2.13.93/_/_/package/e135b8afaaf9274276e3ae293315395467cd735b/include")
set(Fontconfig_INCLUDES "/home/joao/.conan/data/fontconfig/2.13.93/_/_/package/e135b8afaaf9274276e3ae293315395467cd735b/include")
set(Fontconfig_RES_DIRS )
set(Fontconfig_DEFINITIONS )
set(Fontconfig_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)
set(Fontconfig_COMPILE_DEFINITIONS )
set(Fontconfig_COMPILE_OPTIONS_LIST "" "")
set(Fontconfig_COMPILE_OPTIONS_C "")
set(Fontconfig_COMPILE_OPTIONS_CXX "")
set(Fontconfig_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(Fontconfig_LIBRARIES "") # Will be filled later
set(Fontconfig_LIBS "") # Same as Fontconfig_LIBRARIES
set(Fontconfig_SYSTEM_LIBS m pthread)
set(Fontconfig_FRAMEWORK_DIRS )
set(Fontconfig_FRAMEWORKS )
set(Fontconfig_FRAMEWORKS_FOUND "") # Will be filled later
set(Fontconfig_BUILD_MODULES_PATHS )

conan_find_apple_frameworks(Fontconfig_FRAMEWORKS_FOUND "${Fontconfig_FRAMEWORKS}" "${Fontconfig_FRAMEWORK_DIRS}")

mark_as_advanced(Fontconfig_INCLUDE_DIRS
                 Fontconfig_INCLUDE_DIR
                 Fontconfig_INCLUDES
                 Fontconfig_DEFINITIONS
                 Fontconfig_LINKER_FLAGS_LIST
                 Fontconfig_COMPILE_DEFINITIONS
                 Fontconfig_COMPILE_OPTIONS_LIST
                 Fontconfig_LIBRARIES
                 Fontconfig_LIBS
                 Fontconfig_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to Fontconfig_LIBS and Fontconfig_LIBRARY_LIST
set(Fontconfig_LIBRARY_LIST fontconfig)
set(Fontconfig_LIB_DIRS "/home/joao/.conan/data/fontconfig/2.13.93/_/_/package/e135b8afaaf9274276e3ae293315395467cd735b/lib")

# Gather all the libraries that should be linked to the targets (do not touch existing variables):
set(_Fontconfig_DEPENDENCIES "${Fontconfig_FRAMEWORKS_FOUND} ${Fontconfig_SYSTEM_LIBS} Freetype::Freetype;EXPAT::EXPAT;libuuid::libuuid")

conan_package_library_targets("${Fontconfig_LIBRARY_LIST}"  # libraries
                              "${Fontconfig_LIB_DIRS}"      # package_libdir
                              "${_Fontconfig_DEPENDENCIES}"  # deps
                              Fontconfig_LIBRARIES            # out_libraries
                              Fontconfig_LIBRARIES_TARGETS    # out_libraries_targets
                              ""                          # build_type
                              "Fontconfig")                                      # package_name

set(Fontconfig_LIBS ${Fontconfig_LIBRARIES})

foreach(_FRAMEWORK ${Fontconfig_FRAMEWORKS_FOUND})
    list(APPEND Fontconfig_LIBRARIES_TARGETS ${_FRAMEWORK})
    list(APPEND Fontconfig_LIBRARIES ${_FRAMEWORK})
endforeach()

foreach(_SYSTEM_LIB ${Fontconfig_SYSTEM_LIBS})
    list(APPEND Fontconfig_LIBRARIES_TARGETS ${_SYSTEM_LIB})
    list(APPEND Fontconfig_LIBRARIES ${_SYSTEM_LIB})
endforeach()

# We need to add our requirements too
set(Fontconfig_LIBRARIES_TARGETS "${Fontconfig_LIBRARIES_TARGETS};Freetype::Freetype;EXPAT::EXPAT;libuuid::libuuid")
set(Fontconfig_LIBRARIES "${Fontconfig_LIBRARIES};Freetype::Freetype;EXPAT::EXPAT;libuuid::libuuid")

set(CMAKE_MODULE_PATH "/home/joao/.conan/data/fontconfig/2.13.93/_/_/package/e135b8afaaf9274276e3ae293315395467cd735b/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/home/joao/.conan/data/fontconfig/2.13.93/_/_/package/e135b8afaaf9274276e3ae293315395467cd735b/" ${CMAKE_PREFIX_PATH})

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET Fontconfig::Fontconfig)
        add_library(Fontconfig::Fontconfig INTERFACE IMPORTED)
        if(Fontconfig_INCLUDE_DIRS)
            set_target_properties(Fontconfig::Fontconfig PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                                  "${Fontconfig_INCLUDE_DIRS}")
        endif()
        set_property(TARGET Fontconfig::Fontconfig PROPERTY INTERFACE_LINK_LIBRARIES
                     "${Fontconfig_LIBRARIES_TARGETS};${Fontconfig_LINKER_FLAGS_LIST}")
        set_property(TARGET Fontconfig::Fontconfig PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     ${Fontconfig_COMPILE_DEFINITIONS})
        set_property(TARGET Fontconfig::Fontconfig PROPERTY INTERFACE_COMPILE_OPTIONS
                     "${Fontconfig_COMPILE_OPTIONS_LIST}")
        
        # Library dependencies
        include(CMakeFindDependencyMacro)

        if(NOT Freetype_FOUND)
            find_dependency(Freetype REQUIRED)
        else()
            message(STATUS "Dependency Freetype already found")
        endif()


        if(NOT EXPAT_FOUND)
            find_dependency(EXPAT REQUIRED)
        else()
            message(STATUS "Dependency EXPAT already found")
        endif()


        if(NOT libuuid_FOUND)
            find_dependency(libuuid REQUIRED)
        else()
            message(STATUS "Dependency libuuid already found")
        endif()

    endif()
endif()

foreach(_BUILD_MODULE_PATH ${Fontconfig_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
